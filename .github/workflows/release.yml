name: Release

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Release version Type (major, minor, patch)'
        required: true
        type: choice
        options:
          - major
          - minor
          - patch
      release_notes:
        description: 'Release Notes (supports Markdown)'
        required: true
        type: string
      include_commits:
        description: 'Include commit history in release notes?'
        required: true
        type: boolean
        default: true

jobs:
  determine-version:
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.increment-version.outputs.new_version }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get Latest Version Tag
        id: get-latest-version
        run: |
          LATEST_TAG=$(git describe --tags `git rev-list --tags --max-count=1` || echo "0.0.0")
          echo "latest_version=$LATEST_TAG" >> $GITHUB_ENV

      - name: Increment Version
        id: increment-version
        run: |
          LATEST_VERSION=${{ env.latest_version }}
          VERSION_TYPE="${{ inputs.version_type }}"
          
          MAJOR=$(echo $LATEST_VERSION | cut -d. -f1)
          MINOR=$(echo $LATEST_VERSION | cut -d. -f2)
          PATCH=$(echo $LATEST_VERSION | cut -d. -f3)
          
          if [ "$VERSION_TYPE" == "major" ]; then
            NEW_VERSION="$((MAJOR + 1)).0.0"
          elif [ "$VERSION_TYPE" == "minor" ]; then
            NEW_VERSION="$MAJOR.$((MINOR + 1)).0"
          else
            NEW_VERSION="$MAJOR.$MINOR.$((PATCH + 1))"
          fi
          
          echo "new_version=$NEW_VERSION" >> $GITHUB_ENV
          echo "::set-output name=new_version::$NEW_VERSION"

  build-and-release:
    needs: determine-version
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set Up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - name: Grant Execute Permission for Gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew assembleRelease
        continue-on-error: false

      - name: Run Tests
        run: ./gradlew test
        continue-on-error: false

      - name: Generate Release Notes
        run: |
          echo "# Release v${{ needs.determine-version.outputs.new_version }}" > RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          
          # Add user provided release notes
          echo "## Release Notes" >> RELEASE_NOTES.md
          echo "${{ inputs.release_notes }}" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          
          # Add commit history if enabled
          if [ "${{ inputs.include_commits }}" == "true" ]; then
            echo "## Commit History" >> RELEASE_NOTES.md
            echo "" >> RELEASE_NOTES.md
            LATEST_TAG=$(git describe --tags --abbrev=0)
            
            echo "### 🚀 New Features" >> RELEASE_NOTES.md
            git log $LATEST_TAG..HEAD --pretty=format:"- %s" --grep="^feat:" >> RELEASE_NOTES.md
            echo "" >> RELEASE_NOTES.md
            
            echo "### 🐛 Bug Fixes" >> RELEASE_NOTES.md
            git log $LATEST_TAG..HEAD --pretty=format:"- %s" --grep="^fix:" >> RELEASE_NOTES.md
            echo "" >> RELEASE_NOTES.md
            
            echo "### ✨ Improvements" >> RELEASE_NOTES.md
            git log $LATEST_TAG..HEAD --pretty=format:"- %s" --grep="^improve:" >> RELEASE_NOTES.md
          fi

      - name: Create Git Tag
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "github-actions@github.com"
          git tag -a "v${{ needs.determine-version.outputs.new_version }}" -F RELEASE_NOTES.md
          git push origin "v${{ needs.determine-version.outputs.new_version }}"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: app/build/outputs/apk/release/app-release.apk
          tag_name: v${{ needs.determine-version.outputs.new_version }}
          body_path: RELEASE_NOTES.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
